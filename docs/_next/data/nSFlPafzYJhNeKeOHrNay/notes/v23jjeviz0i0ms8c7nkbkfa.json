{"pageProps":{"note":{"id":"v23jjeviz0i0ms8c7nkbkfa","title":"Data Structure","desc":"","updated":1700989300590,"created":1700968290364,"custom":{},"fname":"programming.side projects.flavor flash journal.data structure","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"6149a05134bd1a93958636cf5e1a500a","links":[],"anchors":{"struct-vs-class-vs-actor":{"type":"header","text":"Struct vs Class vs Actor","value":"struct-vs-class-vs-actor","line":8,"column":0,"depth":2},"struct":{"type":"header","text":"struct","value":"struct","line":10,"column":0,"depth":3},"class":{"type":"header","text":"Class","value":"class","line":22,"column":0,"depth":3},"actor":{"type":"header","text":"Actor","value":"actor","line":24,"column":0,"depth":3},"class-vs-struct-":{"type":"header","text":"Class vs Struct ?","value":"class-vs-struct-","line":44,"column":0,"depth":2},"value-vs-reference-types":{"type":"header","text":"Value vs Reference types","value":"value-vs-reference-types","line":48,"column":0,"depth":2},"stack-vs-heap":{"type":"header","text":"Stack vs Heap","value":"stack-vs-heap","line":58,"column":0,"depth":2},"stack":{"type":"header","text":"Stack","value":"stack","line":64,"column":0,"depth":3},"heap":{"type":"header","text":"Heap","value":"heap","line":69,"column":0,"depth":3},"automatic-reference-counting-arc":{"type":"header","text":"Automatic Reference Counting (ARC)","value":"automatic-reference-counting-arc","line":75,"column":0,"depth":2},"situations-when-choosing-different-data-types":{"type":"header","text":"Situations when choosing different data types","value":"situations-when-choosing-different-data-types","line":83,"column":0,"depth":2}},"children":[],"parent":"gzy1xz97zvnttb8urqpfhh3","data":{}},"body":"<h1 id=\"data-structure\">Data Structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-structure\"></a></h1>\n<h2 id=\"struct-vs-class-vs-actor\">Struct vs Class vs Actor<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#struct-vs-class-vs-actor\"></a></h2>\n<h3 id=\"struct\">struct<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#struct\"></a></h3>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyStruct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> title<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> structObject <span class=\"token operator\">=</span> <span class=\"token class-name\">MyStruct</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"myStruct\"</span></span><span class=\"token punctuation\">)</span>\n\nstructObject<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"updated myStruct\"</span></span> <span class=\"token comment\">// This one is a whole new struct object</span>\n</code></pre>\n<h3 id=\"class\">Class<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#class\"></a></h3>\n<h3 id=\"actor\">Actor<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#actor\"></a></h3>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">actor</span> <span class=\"token class-name\">MyDataManager</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">static</span> <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token class-name\">MyDataManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n <span class=\"token keyword\">private</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n <span class=\"token keyword\">var</span> data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getRandomData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">String</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token function\">UUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>uuidString<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">randomElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>Classes that are thread safe.</p>\n</blockquote>\n<h2 id=\"class-vs-struct-\">Class vs Struct ?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#class-vs-struct-\"></a></h2>\n<p>There is much less need to worry about memory leaks or multiple threads racing to access / modeify a single instance of a variable.</p>\n<h2 id=\"value-vs-reference-types\">Value vs Reference types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#value-vs-reference-types\"></a></h2>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>types</th><th align=\"center\">Struct</th><th align=\"center\">Class</th><th align=\"center\">Actor</th><th align=\"center\">Function</th></tr></thead><tbody><tr><td>type</td><td align=\"center\">Value</td><td align=\"center\">Reference</td><td align=\"center\">Reference</td><td align=\"center\">Reference</td></tr><tr><td>Stored in</td><td align=\"center\">Stack</td><td align=\"center\">Heap</td><td align=\"center\">Heap</td><td align=\"center\">Heap</td></tr><tr><td>Speed</td><td align=\"center\">Faster</td><td align=\"center\">Slower</td><td align=\"center\">Slower</td><td align=\"center\"></td></tr><tr><td>Thread safe</td><td align=\"center\">V</td><td align=\"center\">X</td><td align=\"center\">V</td><td align=\"center\">X</td></tr><tr><td>Inheritance</td><td align=\"center\">X</td><td align=\"center\">V</td><td align=\"center\">X</td><td align=\"center\">X</td></tr></tbody></table></div>\n<h2 id=\"stack-vs-heap\">Stack vs Heap<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stack-vs-heap\"></a></h2>\n<p>Value based data types are stored in stack</p>\n<p>Reference based data types are stored in heap</p>\n<h3 id=\"stack\">Stack<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stack\"></a></h3>\n<ul>\n<li>Each thread has it's own stack!</li>\n<li>Variables allocated on the stack are stored directly to the memory, and access to this memory is very fast</li>\n</ul>\n<h3 id=\"heap\">Heap<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#heap\"></a></h3>\n<ul>\n<li>Shared across threads!</li>\n</ul>\n<p><img src=\"/programming_notes/assets/images/project%20brainstorming.flavor%20flash%20journal.thread_struct_heap.png\"></p>\n<h2 id=\"automatic-reference-counting-arc\">Automatic Reference Counting (ARC)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#automatic-reference-counting-arc\"></a></h2>\n<p>value types such as structures and enumerations are just copying the data to data. Therefore it's not affected by ARC.</p>\n<p>ARC is used to track and manage the app's memory usage. When class instances are no longer needed, ARC automatically frees up the memory used by that class.</p>\n<p>這也是為什麼esacaping closure通常會需要標註<code>weak self</code>的原因，以免當某個class不需要被使用時，卻因為某個closure中有引用到strong self而無法正常釋放記憶體。</p>\n<h2 id=\"situations-when-choosing-different-data-types\">Situations when choosing different data types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#situations-when-choosing-different-data-types\"></a></h2>\n<ol>\n<li>\n<p>Structs:</p>\n<ol>\n<li>Data Models</li>\n<li>SwiftUI Views</li>\n</ol>\n</li>\n<li>\n<p>Classes:</p>\n<ol>\n<li>ViewModels</li>\n</ol>\n</li>\n<li>\n<p>Actors:</p>\n<ol>\n<li>Shared 'Manager' / 'Data Store'</li>\n</ol>\n</li>\n</ol>\n<p>References:</p>\n<ul>\n<li><a href=\"https://www.backblaze.com/blog/whats-the-diff-programs-processes-and-threads/\">https://www.backblaze.com/blog/whats-the-diff-programs-processes-and-threads/</a></li>\n</ul>","noteIndex":{"id":"root","title":"root","desc":"","updated":1605266684036,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"b49e7e13a0c91addc8ab9ef97080cf1e","links":[],"anchors":{},"children":["p1jj2aztluo4pb12qn8gunp","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk","c1bs7wsjfbhb0zipaywqv1"],"parent":null,"data":{},"body":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}