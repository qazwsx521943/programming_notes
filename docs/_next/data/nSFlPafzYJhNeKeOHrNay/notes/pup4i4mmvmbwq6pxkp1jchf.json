{"pageProps":{"note":{"id":"pup4i4mmvmbwq6pxkp1jchf","title":"Protocol","desc":"","updated":1698891096416,"created":1698736114248,"custom":{},"fname":"programming.language.swift.protocol","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"4412d5a38855299b3613c5c749b135c3","links":[],"anchors":{"what-is-protocol":{"type":"header","text":"What is Protocol?","value":"what-is-protocol","line":8,"column":0,"depth":2},"why-do-we-need-protocols":{"type":"header","text":"Why do we need Protocols?","value":"why-do-we-need-protocols","line":20,"column":0,"depth":2},"protocol-requirements":{"type":"header","text":"Protocol Requirements","value":"protocol-requirements","line":22,"column":0,"depth":2},"properties":{"type":"header","text":"properties","value":"properties","line":24,"column":0,"depth":3},"functions":{"type":"header","text":"functions","value":"functions","line":30,"column":0,"depth":3},"initializers":{"type":"header","text":"initializers","value":"initializers","line":55,"column":0,"depth":3},"protocol-vs-inheritance":{"type":"header","text":"Protocol vs Inheritance","value":"protocol-vs-inheritance","line":69,"column":0,"depth":2},"note":{"type":"header","text":"Note：","value":"note","line":73,"column":0,"depth":2}},"children":["59ly9f4dsj8kmoihictk4uq"],"parent":"vztg7xzj0425ae5ogmk8ds2","data":{}},"body":"<h1 id=\"protocol\">Protocol<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#protocol\"></a></h1>\n<h2 id=\"what-is-protocol\">What is Protocol?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-protocol\"></a></h2>\n<blockquote>\n<p>A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be adopted by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to conform to that protocol.</p>\n</blockquote>\n<p>Protocol是功能的藍圖，定義好可以交由Type實現功能。</p>\n<p>舉例來說，我們是老闆，我們再請工廠生產我們的產品之前，先給工廠一個產品的requirement，讓我們兩種不同產品，都提供一些相同功能。</p>\n<p>ex: 可以旋轉、可以變色等等</p>\n<p>這些功能是我們的最低要求，我們請工廠一定在建立產品之前，要符合這些功能給我們產品的藍圖，再去實際生產</p>\n<h2 id=\"why-do-we-need-protocols\">Why do we need Protocols?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-do-we-need-protocols\"></a></h2>\n<h2 id=\"protocol-requirements\">Protocol Requirements<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#protocol-requirements\"></a></h2>\n<h3 id=\"properties\">properties<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#properties\"></a></h3>\n<pre class=\"language-swift\"><code class=\"language-swift\"></code></pre>\n<h3 id=\"functions\">functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions\"></a></h3>\n<ul>\n<li>如果用<strong>mutating</strong>標記function的草稿，在實作class method時不必再寫一次在method前，但struct, enum時需要。</li>\n</ul>\n<blockquote>\n<p>為什麼需要mutating標記呢？</p>\n<p>protocol 本身並不會定義function，只定義<strong>名字</strong>、<strong>參數</strong>、<strong>回傳值</strong>。 但是有時候還是很難透過這三個東西去表示這個function實作時需要注意的事，像是會不會去更改到該Type的stored properties，但如果用mutating前綴作為標記的話，就可以一目瞭然，知道這個function實作時會更改到stored property。</p>\n</blockquote>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">OnOffSwitch</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Togglable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> off<span class=\"token punctuation\">,</span> on\n    <span class=\"token comment\">// class實作時不需要再標記為mutating</span>\n    <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token keyword\">self</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>off<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>on\n        <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>on<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">self</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span>off\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> lightSwitch <span class=\"token operator\">=</span> <span class=\"token class-name\">OnOffSwitch</span><span class=\"token punctuation\">.</span>off\nlightSwitch<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"initializers\">initializers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#initializers\"></a></h3>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">protocol</span> <span class=\"token class-name\">SomeProtocol</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>someParameter<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 實作時要加上`required`，但如果標記為`final`的class，則可以不必</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeClass</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">SomeProtocol</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">required</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>someParameter<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// initializer implementation goes here</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"protocol-vs-inheritance\">Protocol vs Inheritance<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#protocol-vs-inheritance\"></a></h2>\n<p>Struct, Enum 是無法被繼承的Type，但我們可以透過讓這些Type遵循某個共同的Protocol去讓Type之間有一些很相似的特性。</p>\n<h2 id=\"note\">Note：<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#note\"></a></h2>\n<ul>\n<li>Protocol 也是一個類別</li>\n</ul>\n<blockquote>\n<p>有時候instance之間並沒有共同superclass，但是有共同的功能，這時候就可以透過protocol的type讓他們有以功能分類的概念。</p>\n</blockquote>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> objects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">AnyObject</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sun</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Frisbee</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Square</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> object <span class=\"token keyword\">in</span> objects <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> roundObject <span class=\"token operator\">=</span> object <span class=\"token keyword\">as</span><span class=\"token operator\">?</span> <span class=\"token class-name\">Round</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"round object\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"not round\"</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>Protocol 可以其他 Protocol 繼承</li>\n<li>Protocol 可以互相組合</li>\n<li>-@objc protocols can be adopted only by classes, not by structures or enumerations</li>\n<li>Protocol 搭配 extension 做</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/programming_notes/notes/59ly9f4dsj8kmoihictk4uq\">Delegate</a></li>\n</ol>","noteIndex":{"id":"root","title":"root","desc":"","updated":1605266684036,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"b49e7e13a0c91addc8ab9ef97080cf1e","links":[],"anchors":{},"children":["p1jj2aztluo4pb12qn8gunp","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk","c1bs7wsjfbhb0zipaywqv1"],"parent":null,"data":{},"body":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}