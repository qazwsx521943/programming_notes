{"pageProps":{"note":{"id":"j5nt68t495df32uuynadodo","title":"Leet Code","desc":"","updated":1703393061638,"created":1703306331660,"custom":{},"fname":"job finding.leet code","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"34ce05b832311918194f552bd6b82e21","links":[],"anchors":{"21-merge-two-linkedlist":{"type":"header","text":"21. Merge two LinkedList","value":"21-merge-two-linkedlist","line":8,"column":0,"depth":2},"26-remove-duplicates-from-sorted-array":{"type":"header","text":"26. Remove Duplicates from Sorted Array","value":"26-remove-duplicates-from-sorted-array","line":56,"column":0,"depth":2}},"children":[],"parent":"p1jj2aztluo4pb12qn8gunp","data":{}},"body":"<h1 id=\"leet-code\">Leet Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#leet-code\"></a></h1>\n<h2 id=\"21-merge-two-linkedlist\">21. Merge two LinkedList<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#21-merge-two-linkedlist\"></a></h2>\n<p>2023/12/23 解題思路： 先將兩個LinkedList都轉成<code>Array</code>，然後將他們的值加總並排序(<code>sorted()</code>)，最後在用這個處理後的<code>Array</code>去將每個element map 成 <code>ListNode</code>，跑迴圈將每個<code>ListNode</code>串接起來</p>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">mergeTwoLists</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> list1<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token omit keyword\">_</span> list2<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">getLinkedArr</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> list<span class=\"token punctuation\">:</span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> list <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">var</span> returnArr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> nextNode <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">{</span>\n                returnArr <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">return</span> returnArr <span class=\"token operator\">+</span> <span class=\"token function\">getLinkedArr</span><span class=\"token punctuation\">(</span>nextNode<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> returnArr <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">generateListNode</span><span class=\"token punctuation\">(</span>from array<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">ListNode</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">.</span>isEmpty <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token nil constant\">nil</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">var</span> listNodeArr <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token short-argument\">$0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> listNodeArr<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>listNodeArr<span class=\"token punctuation\">.</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span>\n                <span class=\"token punctuation\">}</span>\n                node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> listNodeArr<span class=\"token punctuation\">[</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">return</span> listNodeArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">var</span> list1Arr <span class=\"token operator\">=</span> <span class=\"token function\">getLinkedArr</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> list2Arr <span class=\"token operator\">=</span> <span class=\"token function\">getLinkedArr</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> sumListArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>list1Arr <span class=\"token operator\">+</span> list2Arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token function\">generateListNode</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">:</span> sumListArr<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>反思：\n應該應用遞迴的特性，讓listNode去比較並尋找應該接在下一個的listNode，不斷地重複直到沒有下一個listNode.</p>\n<h2 id=\"26-remove-duplicates-from-sorted-array\">26. Remove Duplicates from Sorted Array<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#26-remove-duplicates-from-sorted-array\"></a></h2>\n<p>2023/12/24 解題思路：</p>\n<p>先宣告一個空的陣列，然後將參數的nums陣列跑迴圈，如果nums陣列中的element沒有包含在substituteNums陣列中，就加進去，否則跳過。</p>\n<p>最後再將 substituteNums賦值給nums，並回傳substituteNums的陣列長度。</p>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> nums<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> substituteNums<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> substituteNums<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                substituteNums<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        nums <span class=\"token operator\">=</span> substituteNums\n        <span class=\"token keyword\">return</span> substituteNums<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>反思：</p>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">removeDuplicates</span><span class=\"token punctuation\">(</span><span class=\"token omit keyword\">_</span> nums<span class=\"token punctuation\">:</span> <span class=\"token keyword\">inout</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums <span class=\"token keyword\">where</span> num <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 第一個num一定不會被跑到</span>\n            idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"root","desc":"","updated":1605266684036,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"b49e7e13a0c91addc8ab9ef97080cf1e","links":[],"anchors":{},"children":["p1jj2aztluo4pb12qn8gunp","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk","c1bs7wsjfbhb0zipaywqv1"],"parent":null,"data":{},"body":"\nThis is the root for your Dendron vault.\n\nIf you decide to publish your entire vault, it will be your landing page. You are free to customize any part of this page except the frontmatter at the top, between the `---`.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}