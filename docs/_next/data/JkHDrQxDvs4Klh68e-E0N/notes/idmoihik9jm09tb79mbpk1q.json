{"pageProps":{"note":{"id":"idmoihik9jm09tb79mbpk1q","title":"Architecture","desc":"","updated":1704334133026,"created":1701041481511,"custom":{},"fname":"programming.side projects.flavor flash journal.architecture","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"60a374a372ac4e895260c8795717dd10","links":[],"anchors":{"mvc-mvvm-mvp-decision":{"type":"header","text":"MVC, MVVM, MVP Decision","value":"mvc-mvvm-mvp-decision","line":8,"column":0,"depth":2},"mvc":{"type":"header","text":"MVC","value":"mvc","line":17,"column":0,"depth":3},"為何我不喜歡用mvc":{"type":"header","text":"為何我不喜歡用MVC?","value":"為何我不喜歡用mvc","line":26,"column":0,"depth":3},"why-use-async--await":{"type":"header","text":"Why use async / await","value":"why-use-async--await","line":30,"column":0,"depth":2},"why-dont-use-gcd-in-your-project":{"type":"header","text":"Why don't use GCD in your project?","value":"why-dont-use-gcd-in-your-project","line":36,"column":0,"depth":3},"dependency-injection":{"type":"header","text":"Dependency Injection","value":"dependency-injection","line":44,"column":0,"depth":2},"how-it-works":{"type":"header","text":"How it works?","value":"how-it-works","line":50,"column":0,"depth":3},"singleton":{"type":"header","text":"Singleton","value":"singleton","line":57,"column":0,"depth":2},"app-lifecycle":{"type":"header","text":"App LifeCycle","value":"app-lifecycle","line":70,"column":0,"depth":2},"main-property-wrapper":{"type":"header","text":"@Main property wrapper","value":"main-property-wrapper","line":74,"column":0,"depth":3},"app-protocol":{"type":"header","text":"'App' protocol","value":"app-protocol","line":78,"column":0,"depth":3}},"children":[],"parent":"gzy1xz97zvnttb8urqpfhh3","data":{}},"body":"<h1 id=\"architecture\">Architecture<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#architecture\"></a></h1>\n<h2 id=\"mvc-mvvm-mvp-decision\">MVC, MVVM, MVP Decision<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mvc-mvvm-mvp-decision\"></a></h2>\n<p>思路：</p>\n<ul>\n<li>關注點分離</li>\n<li>低耦合（物件之間的相依程度）</li>\n<li>容易維護</li>\n<li>容易測試</li>\n</ul>\n<h3 id=\"mvc\">MVC<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#mvc\"></a></h3>\n<ul>\n<li>\n<p>Flow:</p>\n<ol>\n<li>View會監聽使用者action然後告知controller</li>\n<li>controller針對使用者action去叫model做對應的事</li>\n<li>model更新然後回應給controller</li>\n<li>controller更新view</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"為何我不喜歡用mvc\">為何我不喜歡用MVC?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#為何我不喜歡用mvc\"></a></h3>\n<ol>\n<li>他把view跟資料處理的邏輯寫在一起了</li>\n</ol>\n<h2 id=\"why-use-async--await\">Why use async / await<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-use-async--await\"></a></h2>\n<p>因為之前在剛開始學swift的時候，都是用completion handler這種closure去規範Task執行的順序，但當某個function的步驟很多，而且是需要按造順序去執行的，那這個時候就會有callback hell。所以我這次個人專案為了讓project更好維護、可讀性更高，所以有稍微去看一下swift中要如何去使用async await。</p>\n<p>那我覺得我有做比較特別的部分是，像我有使用到一些sdk，像是firebase跟google places api，那因為那些api提供的function可能是設計成completionHandler的方式，所以我有再次把這些function包成async await。</p>\n<h3 id=\"why-dont-use-gcd-in-your-project\">Why don't use GCD in your project?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-dont-use-gcd-in-your-project\"></a></h3>\n<p>GCD（Grand Central Dispatch）是一個基於隊列的框架，那它提供了四種不同的 DispatchQueue 物件，讓我們能夠根據需求將不同的任務分配到不同的隊列中。主要分為 serial（串行）和 concurrent（並行）兩種類型的隊列。</p>\n<p>我們可以根據任務的性質，選擇使用 sync 或 async 的方式將任務添加到隊列中。使用 sync 會讓當前的執行緒等待任務完成，而 async 則允許執行緒繼續執行其他任務而不需等待當前任務完成。</p>\n<p>--S--A--S--A--S</p>\n<h2 id=\"dependency-injection\">Dependency Injection<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dependency-injection\"></a></h2>\n<p>Q: What did it solve?</p>\n<p>A: Singleton design pattern cons</p>\n<h3 id=\"how-it-works\">How it works?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-it-works\"></a></h3>\n<blockquote>\n<p>Use protocols to make a blue print of DataServices</p>\n</blockquote>\n<ol>\n<li>Initializing dataServices at a intro level (Can use a Master class to initialize all dataServices)</li>\n<li>Passing these dataService instances into Views and use it to initialize view models (Injection)</li>\n</ol>\n<h2 id=\"singleton\">Singleton<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#singleton\"></a></h2>\n<ul>\n<li>\n<p>Pros:</p>\n<ol>\n<li>Very convenient</li>\n<li>Beginner friendly</li>\n</ol>\n</li>\n<li>\n<p>Cons:</p>\n<ol>\n<li>Singleton's are global (not thread safe)</li>\n<li>can't customize init (bad for testing)</li>\n<li>can't swap out service</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"app-lifecycle\">App LifeCycle<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#app-lifecycle\"></a></h2>\n<p>Prior to iOS 14, iOS apps had a class named \"AppDelegate\" that the creation of this class was the starting point of an app.</p>\n<h3 id=\"main-property-wrapper\"><code>@Main</code> property wrapper<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#main-property-wrapper\"></a></h3>\n<p>Indicates the entry execution of the app</p>\n<h3 id=\"app-protocol\">'App' protocol<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#app-protocol\"></a></h3>\n<p>struct that conform to the App protocol, has a default implementation of the method <code>main()</code>, which manages the launch process of the app.</p>","noteIndex":{"id":"root","title":"My Second Brain","desc":"","updated":1703774418339,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ce2f2d82cf7fe71b3a5900a8f91fd111","links":[],"anchors":{"welcome-to-my-learning-repository-":{"type":"header","text":"Welcome to my learning repository! 📚","value":"welcome-to-my-learning-repository-","line":8,"column":0,"depth":2}},"children":["j416lb0sk2vag9yvgr9bxzb","ski4xep9sjz6v7rxjf1fln1","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk"],"parent":null,"data":{},"body":"\n## Welcome to my learning repository! 📚\n\n**Disclaimer:**\n\nThe content in this repository is a work in progress and should not be considered an authoritative source of information. These notes are currently being compiled during my learning journey at AppWorks School. They are subject to change, and there may be gaps in organization and accuracy.\n\n**Note Status:**\n\nI am actively working on organizing and rectifying any inaccuracies. Expect a more comprehensive set of notes by 2024/01/19.\n\n**Reading guide:**\n\n> Block quotes like this generally means this paragraph is quoted by official documentation.\n\n```swift\n// Example code is typically simplified and may not be practical in real-world scenarios.\n// It is created solely to aid my understanding of the underlying concepts related to a specific topic.\n```\n\nFeel free to connect with me and share your thoughts or suggestions regarding my note-taking process. I appreciate any feedback and collaboration to enhance the quality of these notes.\n\nHappy learning! 🚀"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}