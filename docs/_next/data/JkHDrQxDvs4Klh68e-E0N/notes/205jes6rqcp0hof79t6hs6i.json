{"pageProps":{"note":{"id":"205jes6rqcp0hof79t6hs6i","title":"Concurrency","desc":"","updated":1698670697373,"created":1698463425918,"custom":{},"fname":"programming.language.swift.grand-central-dispatch.concurrency","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"83746cf15bda54403acd9ed4cf2ec08a","links":[],"anchors":{"為什麼我們要好好的處理concurrency":{"type":"header","text":"為什麼我們要好好的處理concurrency?","value":"為什麼我們要好好的處理concurrency","line":8,"column":0,"depth":2},"如何使用dispatchqueue":{"type":"header","text":"如何使用DispatchQueue?","value":"如何使用dispatchqueue","line":12,"column":0,"depth":2},"step-1-取得或建立一個dispatchqueue":{"type":"header","text":"Step 1: 取得或建立一個DispatchQueue","value":"step-1-取得或建立一個dispatchqueue","line":16,"column":0,"depth":3},"step-2-我們可以透過以下方式提交task到一個dispatchqueue物件上並指定dispatchqueue要如何執行這個task":{"type":"header","text":"Step 2: 我們可以透過以下方式提交Task到一個DispatchQueue物件上，並指定DispatchQueue要如何執行這個Task","value":"step-2-我們可以透過以下方式提交task到一個dispatchqueue物件上並指定dispatchqueue要如何執行這個task","line":26,"column":0,"depth":3},"什麼是dispatchitem為何要使用他":{"type":"header","text":"什麼是DispatchItem？為何要使用他？","value":"什麼是dispatchitem為何要使用他","line":38,"column":0,"depth":2},"什麼是dispatchgroup-為何要使用他":{"type":"header","text":"什麼是DispatchGroup? 為何要使用他？","value":"什麼是dispatchgroup-為何要使用他","line":55,"column":0,"depth":2},"什麼是dispatchsemaphore為何要使用他":{"type":"header","text":"什麼是DispatchSemaphore？為何要使用他？","value":"什麼是dispatchsemaphore為何要使用他","line":92,"column":0,"depth":2},"什麼是barrier為何要使用他":{"type":"header","text":"什麼是Barrier？為何要使用他？","value":"什麼是barrier為何要使用他","line":94,"column":0,"depth":2}},"children":[],"parent":"mwi46jvfinzar9tadeb0gsl","data":{}},"body":"<h1 id=\"concurrency\">Concurrency<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#concurrency\"></a></h1>\n<h2 id=\"為什麼我們要好好的處理concurrency\">為什麼我們要好好的處理concurrency?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#為什麼我們要好好的處理concurrency\"></a></h2>\n<p>設計良好的concurrency code可以讓我們充分使用到CPU的資源</p>\n<h2 id=\"如何使用dispatchqueue\">如何使用DispatchQueue?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#如何使用dispatchqueue\"></a></h2>\n<p><strong>DispatchQueue</strong>就是幫我們管理Tasks的一個物件。</p>\n<h3 id=\"step-1-取得或建立一個dispatchqueue\">Step 1: 取得或建立一個DispatchQueue<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#step-1-取得或建立一個dispatchqueue\"></a></h3>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> mainQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span>main  <span class=\"token comment\">// Serial</span>\n\n<span class=\"token keyword\">let</span> globalQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Concurrent</span>\n\n<span class=\"token keyword\">let</span> customQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"example.com.domain\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// default Serial</span>\n</code></pre>\n<h3 id=\"step-2-我們可以透過以下方式提交task到一個dispatchqueue物件上並指定dispatchqueue要如何執行這個task\">Step 2: 我們可以透過以下方式提交Task到一個DispatchQueue物件上，並指定DispatchQueue要如何執行這個Task<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#step-2-我們可以透過以下方式提交task到一個dispatchqueue物件上並指定dispatchqueue要如何執行這個task\"></a></h3>\n<pre class=\"language-swift\"><code class=\"language-swift\">globalQueue<span class=\"token punctuation\">.</span>sync <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task1...</span>\n<span class=\"token punctuation\">}</span>\n\nglobatQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task2...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"什麼是dispatchitem為何要使用他\">什麼是DispatchItem？為何要使用他？<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#什麼是dispatchitem為何要使用他\"></a></h2>\n<p>如果我們想要控制我們的Task狀態呢？ ex: 在三秒內沒有回傳結果時我想要取消這個Task</p>\n<ol>\n<li>\n<p>情境1:  使用者輸入UISearchBar時，不希望每次text change都打一次API，造成後端的負擔。</p>\n<p>我們可以將Task透過DispatchItem封裝，再透過DispatchQueue設定asyncAfter延後執行這個DispatchItem，我們就可以達到延遲fetch資料，減少對後端的負載</p>\n</li>\n</ol>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> workItem <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchWorkItem</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task1...</span>\n<span class=\"token punctuation\">}</span>\n\nglobalQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>execute<span class=\"token punctuation\">:</span> workItem<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"什麼是dispatchgroup-為何要使用他\">什麼是DispatchGroup? 為何要使用他？<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#什麼是dispatchgroup-為何要使用他\"></a></h2>\n<ol>\n<li>情境1: 我們有一個陣列的api要打，我們希望他可以全部加載完再一次更新到畫面上</li>\n</ol>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> globalQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> loadImageGroup <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nloadImageGroup<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nglobalQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n        <span class=\"token operator\">...</span>\n        loadImageGroup<span class=\"token punctuation\">.</span><span class=\"token function\">leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nloadImageGroup<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nglobalQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> response <span class=\"token keyword\">in</span>\n        <span class=\"token operator\">...</span>\n        loadImageGroup<span class=\"token punctuation\">.</span><span class=\"token function\">leave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1. wait synchronously for all tasks to finish</span>\nloadImageGroup<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ↓ Tasks that need to be done after loadImageGroup's task are all done</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"all done\"</span></span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\">// 2. adding a completion handler for loadImageGroup</span>\nloadImageGroup<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ui update code</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2 id=\"什麼是dispatchsemaphore為何要使用他\">什麼是DispatchSemaphore？為何要使用他？<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#什麼是dispatchsemaphore為何要使用他\"></a></h2>\n<h2 id=\"什麼是barrier為何要使用他\">什麼是Barrier？為何要使用他？<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#什麼是barrier為何要使用他\"></a></h2>\n<p>當把Task加到Concurrent Queue中，有時候不同Thread的Task會需要共同存取+修改到某個Value，造成一些Bug。</p>\n<p>透過在submit一個task時設定這個Task被執行時不能有其他task存取到同一個共同資源，可以確保這個task執行時不會有其他存取到共同資源的Task在其他Thread中存取。</p>\n<p><img src=\"/programming_notes/assets/images/language.swift.grand-central-dispatch.concurrency_barrierConcept.png\"></p>","noteIndex":{"id":"root","title":"My Second Brain","desc":"","updated":1703774418339,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ce2f2d82cf7fe71b3a5900a8f91fd111","links":[],"anchors":{"welcome-to-my-learning-repository-":{"type":"header","text":"Welcome to my learning repository! 📚","value":"welcome-to-my-learning-repository-","line":8,"column":0,"depth":2}},"children":["j416lb0sk2vag9yvgr9bxzb","ski4xep9sjz6v7rxjf1fln1","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk"],"parent":null,"data":{},"body":"\n## Welcome to my learning repository! 📚\n\n**Disclaimer:**\n\nThe content in this repository is a work in progress and should not be considered an authoritative source of information. These notes are currently being compiled during my learning journey at AppWorks School. They are subject to change, and there may be gaps in organization and accuracy.\n\n**Note Status:**\n\nI am actively working on organizing and rectifying any inaccuracies. Expect a more comprehensive set of notes by 2024/01/19.\n\n**Reading guide:**\n\n> Block quotes like this generally means this paragraph is quoted by official documentation.\n\n```swift\n// Example code is typically simplified and may not be practical in real-world scenarios.\n// It is created solely to aid my understanding of the underlying concepts related to a specific topic.\n```\n\nFeel free to connect with me and share your thoughts or suggestions regarding my note-taking process. I appreciate any feedback and collaboration to enhance the quality of these notes.\n\nHappy learning! 🚀"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}