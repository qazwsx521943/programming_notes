{"pageProps":{"note":{"id":"m2klofp5yj7niqiawmu25a0","title":"Grand Central Dispatch","desc":"","updated":1704124807904,"created":1698417734679,"custom":{},"fname":"programming.language.swift.framework.grand-central-dispatch","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"8561eea8a5d75d5b5ee371c196598d55","links":[],"anchors":{"what-is-grand-central-dispatch":{"type":"header","text":"What is Grand Central Dispatch?","value":"what-is-grand-central-dispatch","line":17,"column":0,"depth":2},"what-problem-did-gcd-solve":{"type":"header","text":"What problem did GCD solve?","value":"what-problem-did-gcd-solve","line":23,"column":0,"depth":2},"how-did-it-work":{"type":"header","text":"How did it Work?","value":"how-did-it-work","line":31,"column":0,"depth":2},"before-gcd":{"type":"header","text":"Before GCD","value":"before-gcd","line":35,"column":0,"depth":3},"after-gcd":{"type":"header","text":"After GCD","value":"after-gcd","line":51,"column":0,"depth":3},"parallelism-and-concurrency":{"type":"header","text":"Parallelism and Concurrency","value":"parallelism-and-concurrency","line":63,"column":0,"depth":2},"explaination-from-wwdc2017-gcd":{"type":"header","text":"Explaination from WWDC2017 GCD","value":"explaination-from-wwdc2017-gcd","line":65,"column":2,"depth":3},"queue-concept":{"type":"header","text":"Queue Concept","value":"queue-concept","line":74,"column":0,"depth":2},"dispatchqueue":{"type":"header","text":"DispatchQueue","value":"dispatchqueue","line":83,"column":0,"depth":3},"serial-vs-concurrent":{"type":"header","text":"Serial vs Concurrent","value":"serial-vs-concurrent","line":85,"column":0,"depth":4},"sync-vs-async":{"type":"header","text":"Sync vs async","value":"sync-vs-async","line":93,"column":0,"depth":4}},"children":[],"parent":"qjbja5y4bx4h8yq4aaydnss","data":{}},"body":"<h1 id=\"grand-central-dispatch\">Grand Central Dispatch<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#grand-central-dispatch\"></a></h1>\n<p><img src=\"/programming_notes/assets/images/language.swift.grand-central-dispatch_icon.png\" alt=\"GCD_icon\"></p>\n<div class=\"mermaid\">\n  graph TB;\nA[Grand Central Dispatch] --> B[Why do we need it?]\nA --> C[How did it work?]\nA --> D[Alternatives]\n</div>\n<h2 id=\"what-is-grand-central-dispatch\">What is Grand Central Dispatch?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-grand-central-dispatch\"></a></h2>\n<blockquote>\n<p>Dispatch, also known as Grand Central Dispatch (GCD), contains language features, runtime libraries, and system enhancements that provide systemic, comprehensive improvements to the support for concurrent code execution on multicore hardware in macOS, iOS, watchOS, and tvOS.</p>\n</blockquote>\n<p>一個讓工程師可以更輕易配置<strong>concurrent code</strong>的框架</p>\n<h2 id=\"what-problem-did-gcd-solve\">What problem did <strong>GCD</strong> solve?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-problem-did-gcd-solve\"></a></h2>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>執行緒管理</th><th>人工</th><th>GCD</th></tr></thead><tbody><tr><td>(維護 / 開發)難度</td><td>較高</td><td>較低</td></tr><tr><td>平均效能</td><td>1</td><td>1.3</td></tr><tr><td>安全性</td><td>不一定</td><td>安全</td></tr></tbody></table></div>\n<h2 id=\"how-did-it-work\">How did it Work?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-did-it-work\"></a></h2>\n<p>GCD是一個讓我們可以不用直接操作Thread的API，我們只需要指定Task的<strong>性質</strong>，並將他加入適當的<strong>DispatchQueue</strong>，GCD就可以幫我們處理這些Task應該要在哪個Thread被執行。</p>\n<h3 id=\"before-gcd\">Before GCD<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#before-gcd\"></a></h3>\n<div class=\"mermaid\">\n  graph TD\nA[Program] --> B[Create Threads]\nB --> C[Define Thread Functions]\nC --> D[Start Threads]\nD --> E[Thread1: Task1]\nD --> F[Thread2: Task2]\nD --> G[Thread3: Task3]\nE --> H[Thread Synchronization]\nF --> H\nG --> H\nH --> I[Continue Execution]\n</div>\n<h3 id=\"after-gcd\">After GCD<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#after-gcd\"></a></h3>\n<div class=\"mermaid\">\n  graph TD\nA[Program] --> B[Dispatch Queue1]\nA[Program] --> C[Dispatch Queue2]\nB --> D[Task1]\nB --> E[Task2]\nC --> F[Task3]\nC --> G[Task4]\n</div>\n<h2 id=\"parallelism-and-concurrency\">Parallelism and Concurrency<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#parallelism-and-concurrency\"></a></h2>\n<blockquote>\n<h3 id=\"explaination-from-wwdc2017-gcd\">Explaination from WWDC2017 GCD<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#explaination-from-wwdc2017-gcd\"></a></h3>\n<ul>\n<li>\n<p>Parallelism</p>\n<p>Simultaneous execution of closely related computations</p>\n</li>\n<li>\n<p>Concurrency</p>\n<p>Composition of independently executed tasks</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"queue-concept\">Queue Concept<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#queue-concept\"></a></h2>\n<p>當我們提交Task到DispatchQueue中，GCD會依照先進先出(FIFO)的規則依序執行我們的Task。</p>\n<p>我們僅需要注意：</p>\n<ul>\n<li>選擇對的DispatchQueue( Serial / Concurrent )</li>\n<li>執行對的dispatching function( sync / async )</li>\n</ul>\n<h3 id=\"dispatchqueue\">DispatchQueue<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dispatchqueue\"></a></h3>\n<h4 id=\"serial-vs-concurrent\">Serial vs Concurrent<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#serial-vs-concurrent\"></a></h4>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>DispatchQueue Type</th><th align=\"center\">Serial</th><th align=\"center\">Concurrent</th></tr></thead><tbody><tr><td>可預測</td><td align=\"center\">可以</td><td align=\"center\">不一定</td></tr><tr><td>發生Race Condition</td><td align=\"center\">不可能</td><td align=\"center\">可能</td></tr><tr><td>完成Task的速度</td><td align=\"center\">慢</td><td align=\"center\">快</td></tr></tbody></table></div>\n<h4 id=\"sync-vs-async\">Sync vs async<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sync-vs-async\"></a></h4>\n<blockquote>\n<p>Dispatch Function is just a function that tells the queue how this task should be scheduled</p>\n</blockquote>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> backgroundQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbackgroundQueue<span class=\"token punctuation\">.</span>sync <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task1</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"task1\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"between sync\"</span></span><span class=\"token punctuation\">)</span>\n\nbackgroundQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task2</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"task2\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// task1</span>\n<span class=\"token comment\">// between sync</span>\n<span class=\"token comment\">// task2</span>\n</code></pre>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> backgroundQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbackgroundQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task1</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"task1\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"middle\"</span></span><span class=\"token punctuation\">)</span>\n\nbackgroundQueue<span class=\"token punctuation\">.</span>sync <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task2</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"task2\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"bottom\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// between async</span>\n<span class=\"token comment\">// task2</span>\n<span class=\"token comment\">// after all async</span>\n<span class=\"token comment\">// task1</span>\n</code></pre>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> backgroundQueue <span class=\"token operator\">=</span> <span class=\"token class-name\">DispatchQueue</span><span class=\"token punctuation\">.</span><span class=\"token function\">global</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbackgroundQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task1</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"small task done, on thread </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>current</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n  backgroundQueue<span class=\"token punctuation\">.</span>sync <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"sync task, on thread </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>current</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    backgroundQueue<span class=\"token punctuation\">.</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"inside sync async task, on thread </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>current</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"between async\"</span></span><span class=\"token punctuation\">)</span>\n\nbackgroundQueue<span class=\"token punctuation\">.</span>sync <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Task2</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"task2\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"after all async\"</span></span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// output:</span>\n<span class=\"token comment\">// between async</span>\n<span class=\"token comment\">// task2</span>\n<span class=\"token comment\">// after all async</span>\n<span class=\"token comment\">// task1</span>\n</code></pre>","noteIndex":{"id":"root","title":"My Second Brain","desc":"","updated":1703774418339,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ce2f2d82cf7fe71b3a5900a8f91fd111","links":[],"anchors":{"welcome-to-my-learning-repository-":{"type":"header","text":"Welcome to my learning repository! 📚","value":"welcome-to-my-learning-repository-","line":8,"column":0,"depth":2}},"children":["j416lb0sk2vag9yvgr9bxzb","ski4xep9sjz6v7rxjf1fln1","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk"],"parent":null,"data":{},"body":"\n## Welcome to my learning repository! 📚\n\n**Disclaimer:**\n\nThe content in this repository is a work in progress and should not be considered an authoritative source of information. These notes are currently being compiled during my learning journey at AppWorks School. They are subject to change, and there may be gaps in organization and accuracy.\n\n**Note Status:**\n\nI am actively working on organizing and rectifying any inaccuracies. Expect a more comprehensive set of notes by 2024/01/19.\n\n**Reading guide:**\n\n> Block quotes like this generally means this paragraph is quoted by official documentation.\n\n```swift\n// Example code is typically simplified and may not be practical in real-world scenarios.\n// It is created solely to aid my understanding of the underlying concepts related to a specific topic.\n```\n\nFeel free to connect with me and share your thoughts or suggestions regarding my note-taking process. I appreciate any feedback and collaboration to enhance the quality of these notes.\n\nHappy learning! 🚀"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}