{"pageProps":{"note":{"id":"rxplme0keulo3fon6e4gxmc","title":"Serialization","desc":"","updated":1704124889647,"created":1703433158198,"custom":{},"fname":"programming.language.swift.Serialization","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"a3619dd861b9d20b6d92702debdeb798","links":[],"anchors":{"為何我們需要將資料encodedecode呢":{"type":"header","text":"為何我們需要將資料encode、decode呢？","value":"為何我們需要將資料encodedecode呢","line":12,"column":0,"depth":2},"codable-behind-the-scenes":{"type":"header","text":"Codable Behind the scenes","value":"codable-behind-the-scenes","line":18,"column":0,"depth":2},"example":{"type":"header","text":"Example","value":"example","line":22,"column":0,"depth":2},"foundation-codable-types":{"type":"header","text":"Foundation codable types","value":"foundation-codable-types","line":46,"column":0,"depth":2},"自定義-codingkeys":{"type":"header","text":"自定義 CodingKeys","value":"自定義-codingkeys","line":55,"column":0,"depth":2},"why":{"type":"header","text":"Why?","value":"why","line":83,"column":0,"depth":3},"codable常用的情境":{"type":"header","text":"Codable常用的情境：","value":"codable常用的情境","line":109,"column":0,"depth":2}},"children":["ehit98sudwsnivfx8dnovwq"],"parent":"vztg7xzj0425ae5ogmk8ds2","data":{}},"body":"<h1 id=\"serialization\">Serialization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#serialization\"></a></h1>\n<p><strong>Foundation</strong> library定義了<code>Encodable</code>, <code>Decodable</code>, 也提供<code>Encoder</code>, <code>Decoder</code> API讓我們可以很方便地進行資料處理。</p>\n<p>當我們需要更深入的設定時，也可以使用<code>EncodableWithConfiguration</code>, <code>DecodableWithConfiguration</code>這兩個protocols。</p>\n<h2 id=\"為何我們需要將資料encodedecode呢\">為何我們需要將資料encode、decode呢？<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#為何我們需要將資料encodedecode呢\"></a></h2>\n<p>當我們透過網路傳送資料、將資料存到硬碟上，通常都需要先將檔案編碼成特定的格式再做傳輸、儲存。</p>\n<p>而我們在撰寫程式碼時，會定義出一些類(class、struct)，當我們需要將這些類別的實體拿來做傳輸、儲存時，我們必須要讓這個類<code>Codable</code>，才可以透過Decoder、Encoder處理我們的資料。</p>\n<h2 id=\"codable-behind-the-scenes\"><code>Codable</code> Behind the scenes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#codable-behind-the-scenes\"></a></h2>\n<p><img src=\"/programming_notes/assets/images/programming.language.swift.Serialization_behind-the-scenes.png\" alt=\"codable behind the scenes\"></p>\n<h2 id=\"example\">Example<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example\"></a></h2>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TestEncode</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">let</span> intArr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Instance method 'encode' requires that 'TestEncode' conform to 'Encodable'</span>\n<span class=\"token keyword\">let</span> encodedJSONData <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">JSONEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestEncode</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"encode&#x26;decode\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> encodedPropertyListData <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">?</span> <span class=\"token class-name\">PropertyListEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestEncode</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"encode&#x26;Decode\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>如果自定義的類沒有遵守<code>Encodable</code> protocol，encoder的encode方法是沒有辦法接收自定義類的實例的。</p>\n<p>這時候只需要讓TestEncode遵守<code>Encodable</code>，即可順利encode了</p>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">TestEncode</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Encodable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> id<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">let</span> intArr<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"foundation-codable-types\">Foundation codable types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#foundation-codable-types\"></a></h2>\n<ul>\n<li>String</li>\n<li>Int</li>\n<li>Double</li>\n<li>Date</li>\n<li>Data</li>\n<li>URL</li>\n</ul>\n<h2 id=\"自定義-codingkeys\">自定義 <code>CodingKeys</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#自定義-codingkeys\"></a></h2>\n<p>當自定義的類遵守<code>Codable</code>時，我們可以選擇在類別內宣告一個叫<code>CodingKeys</code>的enum，且這個enum需遵守<code>CodingKey</code>協議。</p>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">/// A type that can be used as a key for encoding and decoding.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">protocol</span> <span class=\"token class-name\">CodingKey</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">CustomDebugStringConvertible</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CustomStringConvertible</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Sendable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">/// The string to use in a named collection (e.g. a string-keyed dictionary).</span>\n    <span class=\"token keyword\">var</span> stringValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>stringValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">/// The value to use in an integer-indexed collection (e.g. an int-keyed dictionary).</span>\n    <span class=\"token keyword\">var</span> intValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>intValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">extension</span> <span class=\"token class-name\">CodingKey</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/// A textual representation of this key.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> description<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/// A textual representation of this key, suitable for debugging.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">var</span> debugDescription<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"why\">Why?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why\"></a></h3>\n<p>有時候序列化後的資料格式(key-value pair)的key命名並不符合Swift的命名邏輯，且有時候這個key會頻繁被更改，與其隨著這些外部的資料key去做property的命名，不如就透過宣告<code>CodingKeys</code>拿來map這些外部的資料格式。</p>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> mockJSONData <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"\"\"\n    {\n      5\"first_name\": \"Jason\",\n      \"last_name\": \"Chung\"\n    }\n\"\"\"</span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Codable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n    <span class=\"token keyword\">let</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span>\n\n    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">CodingKeys</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CodingKey</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> firstName <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"first_name\"</span></span>\n      <span class=\"token keyword\">case</span> lastName <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"last_name\"</span></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> encodedJSONData <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span><span class=\"token operator\">!</span> mockJSONData<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>using<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">.</span>utf8<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span>\n<span class=\"token keyword\">let</span> decodedJSONData <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">JSONDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">:</span> encodedJSONData<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"codable常用的情境\"><code>Codable</code>常用的情境：<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#codable常用的情境\"></a></h2>\n<ol>\n<li>JSON Serialization/Deserialization</li>\n<li>PropertyList Serialization</li>\n<li>UserDefaults</li>\n<li>Unit Testing (透過自定義類建立假資料，轉換成JSON格式測試Decoding出錯情境)</li>\n</ol>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/programming_notes/notes/ehit98sudwsnivfx8dnovwq\">Decoding JSON</a></li>\n</ol>","noteIndex":{"id":"root","title":"My Second Brain","desc":"","updated":1703774418339,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ce2f2d82cf7fe71b3a5900a8f91fd111","links":[],"anchors":{"welcome-to-my-learning-repository-":{"type":"header","text":"Welcome to my learning repository! 📚","value":"welcome-to-my-learning-repository-","line":8,"column":0,"depth":2}},"children":["j416lb0sk2vag9yvgr9bxzb","ski4xep9sjz6v7rxjf1fln1","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk"],"parent":null,"data":{},"body":"\n## Welcome to my learning repository! 📚\n\n**Disclaimer:**\n\nThe content in this repository is a work in progress and should not be considered an authoritative source of information. These notes are currently being compiled during my learning journey at AppWorks School. They are subject to change, and there may be gaps in organization and accuracy.\n\n**Note Status:**\n\nI am actively working on organizing and rectifying any inaccuracies. Expect a more comprehensive set of notes by 2024/01/19.\n\n**Reading guide:**\n\n> Block quotes like this generally means this paragraph is quoted by official documentation.\n\n```swift\n// Example code is typically simplified and may not be practical in real-world scenarios.\n// It is created solely to aid my understanding of the underlying concepts related to a specific topic.\n```\n\nFeel free to connect with me and share your thoughts or suggestions regarding my note-taking process. I appreciate any feedback and collaboration to enhance the quality of these notes.\n\nHappy learning! 🚀"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}