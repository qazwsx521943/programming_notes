{"pageProps":{"note":{"id":"e3wts7ybn3i1jj1huiz9rid","title":"StateObject","desc":"","updated":1703406747121,"created":1703397824582,"custom":{},"fname":"programming.language.swift.framework.SwiftUI.property wrappers.StateObject","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"fb9214ca5f37a44d324c119f1c4f2c12","links":[],"anchors":{"what-is-stateobject":{"type":"header","text":"What is @StateObject","value":"what-is-stateobject","line":8,"column":0,"depth":2},"when-to-use-it":{"type":"header","text":"When to use it?","value":"when-to-use-it","line":12,"column":0,"depth":2},"behind-the-scenes":{"type":"header","text":"Behind the scenes","value":"behind-the-scenes","line":18,"column":0,"depth":2},"injecting-stateobjects-into-views":{"type":"header","text":"Injecting @StateObjects into views","value":"injecting-stateobjects-into-views","line":20,"column":0,"depth":2},"force-stateobject-property-to-reinitialize":{"type":"header","text":"Force @StateObject property to reinitialize","value":"force-stateobject-property-to-reinitialize","line":39,"column":0,"depth":2},"ios-170-introduced-observable-macro":{"type":"header","text":"iOS 17.0 introduced @Observable macro","value":"ios-170-introduced-observable-macro","line":43,"column":0,"depth":2}},"children":[],"parent":"2v31mamk1fjl6km26amg70u","data":{}},"body":"<h1 id=\"stateobject\">StateObject<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stateobject\"></a></h1>\n<h2 id=\"what-is-stateobject\">What is <code>@StateObject</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-stateobject\"></a></h2>\n<blockquote>\n<p>A property wrapper type that instantiates an observable object.</p>\n</blockquote>\n<h2 id=\"when-to-use-it\">When to use it?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#when-to-use-it\"></a></h2>\n<blockquote>\n<p>Use a state object as the single source of truth for a reference type that you store in a view hierarchy.</p>\n<p>when you need to create a reference type inside one of your views and make sure it stays alive for use in that view and others you share it with.</p>\n</blockquote>\n<h2 id=\"behind-the-scenes\">Behind the scenes<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#behind-the-scenes\"></a></h2>\n<h2 id=\"injecting-stateobjects-into-views\">Injecting <code>@StateObjects</code> into views<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#injecting-stateobjects-into-views\"></a></h2>\n<pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyInitializableView</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute atrule\">@StateObject</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> model<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DataModel</span>\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// SwiftUI ensures that the following initialization uses the</span>\n        <span class=\"token comment\">// closure only once during the lifetime of the view, so</span>\n        <span class=\"token comment\">// later changes to the view's name input have no effect.</span>\n        _model <span class=\"token operator\">=</span> <span class=\"token class-name\">StateObject</span><span class=\"token punctuation\">(</span>wrappedValue<span class=\"token punctuation\">:</span> <span class=\"token class-name\">DataModel</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> body<span class=\"token punctuation\">:</span> <span class=\"token keyword\">some</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">VStack</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Name: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\">model<span class=\"token punctuation\">.</span>name</span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"force-stateobject-property-to-reinitialize\">Force <code>@StateObject</code> property to reinitialize<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#force-stateobject-property-to-reinitialize\"></a></h2>\n<p>如果希望View中的reference type在View重繪時重新初始化，可以透過給定id modifier的方式去強迫這個reference type重新初始化（一般來說重繪View時，如果View的id沒有變化，SwiftUI就不會重新初始化這個 reference type property）</p>\n<h2 id=\"ios-170-introduced-observable-macro\">iOS 17.0 introduced <code>@Observable</code> macro<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ios-170-introduced-observable-macro\"></a></h2>\n<ul>\n<li>\n<p>使用<code>@Observable</code> macro 帶來什麼好處？</p>\n<ol>\n<li>寫更少扣：\n<ol>\n<li>只要class前面帶有<code>@Observable</code>，裡面宣告的變數都帶有<code>@Published</code>特性。</li>\n<li>在View中初始化該class的實體不需要標記為<code>@StateObject</code>。</li>\n<li>該class也不需要在定義時標記遵守 <code>ObservableObject</code>。</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>","noteIndex":{"id":"root","title":"My Second Brain","desc":"","updated":1703774418339,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ce2f2d82cf7fe71b3a5900a8f91fd111","links":[],"anchors":{"welcome-to-my-learning-repository-":{"type":"header","text":"Welcome to my learning repository! 📚","value":"welcome-to-my-learning-repository-","line":8,"column":0,"depth":2}},"children":["j416lb0sk2vag9yvgr9bxzb","ski4xep9sjz6v7rxjf1fln1","avquk6puzxi790rxzodnfmh","rn0e0y5coqo8iyqfxd7ocsk"],"parent":null,"data":{},"body":"\n## Welcome to my learning repository! 📚\n\n**Disclaimer:**\n\nThe content in this repository is a work in progress and should not be considered an authoritative source of information. These notes are currently being compiled during my learning journey at AppWorks School. They are subject to change, and there may be gaps in organization and accuracy.\n\n**Note Status:**\n\nI am actively working on organizing and rectifying any inaccuracies. Expect a more comprehensive set of notes by 2024/01/19.\n\n**Reading guide:**\n\n> Block quotes like this generally means this paragraph is quoted by official documentation.\n\n```swift\n// Example code is typically simplified and may not be practical in real-world scenarios.\n// It is created solely to aid my understanding of the underlying concepts related to a specific topic.\n```\n\nFeel free to connect with me and share your thoughts or suggestions regarding my note-taking process. I appreciate any feedback and collaboration to enhance the quality of these notes.\n\nHappy learning! 🚀"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://qazwsx521943.github.io","assetsPrefix":"/programming_notes","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}